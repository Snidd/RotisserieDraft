@model RotisserieDraft.ViewModels.DraftViewModel

@{
    ViewBag.Title = Model.Name;
}
<script src="@Url.Content("~/Scripts/autocard.js")" type="text/ecmascript"></script>
<script type="text/ecmascript" language="ecmascript">

    var showAllPicks = false;

    function getParameterByName(name, fromValue) {
        name = name.replace(/[\[]/, "\\\[").replace(/[\]]/, "\\\]");
        var regexS = "[\\?&]" + name + "=([^&#]*)";
        var regex = new RegExp(regexS);
        var results = regex.exec(fromValue);
        if (results == null)
            return "";
        else
            return decodeURIComponent(results[1].replace(/\+/g, " "));
    }
    
    function togglePickList(memberId) {
        $('#DraftMemberPicks-' + memberId).toggle(200);
    }

    function pickComplete(result) {
        
        var jsonResult = eval('(' + result.responseText + ')');

        if (jsonResult.pickresult) {

            showAllPicks = false;
            updateTogglePicksText();

            var dvm = jsonResult.updatedDvm;

            updatePage(dvm);
        }
        else {
            if (jsonResult.alternatives != null && jsonResult.alternatives.length > 0) {
                $('.alternative-link').remove();
                for (var i = 0; i < jsonResult.alternatives.length; i++) {
                    var cardName = jsonResult.alternatives[i].Name.replace("'", "\\'");
                    $('#alternativelinks').append('<a class="alternative-link" href="javascript:alternativePick(\'' + cardName + '\')">' + jsonResult.alternatives[i].Name + '</a> ')
                }
                showAlternativePicks();
                addMouseOverLinks();
            }
            else {
                showErrorMessage(jsonResult.reason);
            }
        }
    }

    function showErrorMessage(message) {
        $('#errormessage').text(message);
        $('#errormessage').css("visibility", "visible");
        setTimeout(hideErrorMessage, 5000);
    }

    function hideErrorMessage() {
        $('#errormessage').css("visibility", "hidden");
    }

    function refreshView(result) {
        var jsonDvm = eval('(' + result.responseText + ')');
        updatePage(jsonDvm);
    }

    function addRemoveButtonsToFuturePicks() {
        $('.draftmember-box-futurepick').mouseenter(fpEnter).mouseleave(fpLeave);
    }

    function removePick(cardName) {
        // In the future, try to remove the futurepick immediatly, cant get it to work now. None of these work, they all update all the divs.
        //$("div:contains('" + cardName.toString() + "')").css("text-decoration", "underline");
        //$("div:contains(Daze)").css("text-decoration", "underline");
        //$("div:contains('Daze')").css("text-decoration", "underline");
        //$("div:contains('Daze')").css("text-decoration", "underline");

        $("div:contains(" + cardName + "):not(:has(div))").css("text-decoration", "underline");

        $.ajax({
            type: "POST",
            url: "/Draft/RemovePick/@Model.Id",
            data: "cardName=" + cardName,
            success: function (result) {
                if (result != null && result.success != null && result.success) {
                    showAllPicks = false;
                    updateTogglePicksText();
                    updatePage(result.dvm);
                }
            }
        });
    }

    function fpEnter(futurepick) {
        var cardName = futurepick.currentTarget.innerText.replace("'", "\\'");
        $(futurepick.currentTarget)
            .append('<div id="removefpimage" class="rightalign"><input type="image" src="/Content/Images/remove.png" onclick="removePick(\'' + cardName + '\')" /></div>');
    }

    function fpLeave(futurepick) {
        $('#removefpimage').remove();
    }

    function updatePage(dvm) {
        $('.draftmember-box-futurepick').remove();

        for (var i = 0; i < dvm.FuturePicks.length; i++) {
            $('#pickform').before('<div class="draftmember-box-futurepick" id="DraftMemberFuturePickBox">' + dvm.FuturePicks[i] + '</div>');
        }

        $('.draftmember-box-future').remove();
        $('.draftmember-box-current').remove();
        $('.draftmember-box-history').remove();
        $('.draftmember-box-card').remove();

        var afterObject = $('#picksAfterThis');

        for (var i = 0; i < dvm.Picks.length; i++) {
            var pick = dvm.Picks[i];

            var cssStyle = "draftmember-box-history";
            var pickBox = "";

            if (pick.PickTime == 0) {
                cssStyle = "draftmember-box-current";
            } else if (pick.PickTime == 1) {
                cssStyle = "draftmember-box-future";
            } else if (pick.PickTime == -1) {
                pickBox = '<div class="draftmember-box-card ' + pick.ColorClass + '" id="DraftMemberPickBox"><p class="pick-cardname"><a href="../Details/@Model.Id" target="_blank" class="mtgcard ' + pick.ColorClass + '">' + pick.CardName + '</a></p></div>';
            }

            afterObject = afterObject.before('<div class="' + cssStyle + '" id="DraftMemberBox"><p class="draftmember-name"><a class="draftmember-statisticslink" href="javascript:showStatistics(this, @Model.Id, ' + pick.MemberId + ')">' + pick.MemberName + '</a></p></div>' + pickBox + '<div style="clear: both"></div>');
        }

        addRemoveButtonsToFuturePicks();
        addMouseOverLinks();
    }

    $(document).ready(initializeDocument);

    function initializeDocument() {
        addRemoveButtonsToFuturePicks();
        hideStatistics();
        hideAlternativePicks();
        startAutomaticRefresh();
        addMouseOverLinks();
    }

    function startAutomaticRefresh() {
        setTimeout(automaticRefresh, 10000);
    }

    function automaticRefresh() {
        $.ajax({
            type: "POST",
            url: "/Draft/Details/@Model.Id",
            data: "allPicks=" + showAllPicks,
            success: function (result) {
                if (result != null) {
                    updatePage(result);
                }
                startAutomaticRefresh();
            }
        });
    }

    function toggleAllPicks() {
        showAllPicks = !showAllPicks;
        automaticRefresh();
        updateTogglePicksText();
    }

    function updateTogglePicksText() {
        var textOutput = "";
        if (showAllPicks)
            textOutput = "Show latest picks only";
        else
            textOutput = "Show all picks";

        $('.toggleAllPicksLink').text(textOutput);
    }

    function showStatistics(link, draftId, memberId) {
        //$('#picksAfterThis').before('<iframe src=");
        $('#statistics-frame').attr("src", "../MemberStatistics?draftId=" + draftId + "&memberId=" + memberId);
        $('#statistics-box').show();
    }

    function hideStatistics() {
        $('#statistics-box').hide();
    }

    function showAlternativePicks() {
        $('#alternativepicks').show();
    }

    function hideAlternativePicks() {
        $('#alternativepicks').hide();
    }

    function alternativePick(cardName) {
        cardName = unescape(cardName);
        $('#cardNameBox').attr("value", cardName);
        hideAlternativePicks();
    }

</script>

 <div id="alternativepicks">    
    <p id="alternativelinks"></p>
    <p id="alternativedescription">That card wasn't found, did you mean any of these? </p>    
 </div>

<div id="errormessage">Wrong something!</div>

@foreach (var fp in Model.FuturePicks)
{
    <div class="draftmember-box-futurepick" id="DraftMemberFuturePickBox">@fp</div>
}
@if (Model.IsMemberOfDraft)
{
    using (Ajax.BeginForm("Pick", "Draft", new AjaxOptions() { OnComplete = "pickComplete", HttpMethod = "Post" }, new { id = "pickform"}))
    {
        @Html.Hidden("draftId", Model.Id);
        @Html.TextBox("cardName", "", new { @id = "cardNameBox" })
        <input type="submit" id="pickcard" value="Pick card!" />
    }
}
    <p class="actionParagraph"><a href="javascript:automaticRefresh();" class="refreshlink">Refresh</a> - <a href="javascript:toggleAllPicks();" class="toggleAllPicksLink">Show all picks</a></p>    
    <div id="statistics-box"><div id="close-box"><a href="javascript:hideStatistics()">Hide</a></div><iframe id="statistics-frame" frameborder="0" height="250" src="../MemberStatistics?draftId=2&memberId=9"></iframe></div>
    
    <div id="picksAfterThis"></div>
@foreach (var p in Model.Picks)
{
    <div class="draftmember-box-@p.PickTime.ToString().ToLower()" id="DraftMemberBox">
        <p class="draftmember-name"><a class="draftmember-statisticslink" href="javascript:showStatistics(this, @Model.Id, @p.MemberId)">@p.MemberName</a>
    </div>
                               if (p.PickTime == RotisserieDraft.ViewModels.PickTime.History)
                               {
        <div class="draftmember-box-card @p.ColorClass" id="DraftMemberPickBox">
            <p class="pick-cardname"><a href="../Details/@Model.Id" target="_blank" class="mtgcard @p.ColorClass">@p.CardName</a></p>
        </div>
                               }
    <div style="clear: both"></div>
}
<p>
    @Html.ActionLink("Back to List", "Index")
</p>
<fieldset>
    <legend>Information</legend>

    <table class="draftinformation">
        <tr>
            <td>
                <div class="display-label">Current amount of picks</div>
                <div class="display-field">@Model.CurrentNumberOfPicks</div>
            </td>
            <td>
                <div class="display-label">Maximum amount of picks</div>
                <div class="display-field">@Model.MaximumNumberOfPicks</div>
            </td>
            <td>
                <div class="display-label">Number of players in draft</div>
                <div class="display-field">@Model.Members.Count</div>
            </td>
        </tr>
        <tr>
            <td>
                <div class="display-label">Creator</div>
                <div class="display-field">@Model.Owner</div>
            </td>
            <td>
                <div class="display-label">Created</div>
                <div class="display-field">@String.Format("{0:g}", Model.CreationDate)</div>
            </td>
            <td>
                <div class="display-label">Name</div>
                <div class="display-field">@Model.Name</div>
            </td>
        </tr>
    </table>
</fieldset>

@section chatwindow {
    @if (Request.IsAuthenticated)
    {
        <script type="text/ecmascript" language="ecmascript">
            var chatWindowOpen = false;

            function toggleExpandChatWindow() {
                if (!chatWindowOpen) {
                    startGetEntireChatList();
                    $('#chatwindow').animate({
                        width: '25%'
                    }, 600, function () {
                        $('#chatcontent').show();
                        $('#chatsubmit').show();
                        setChatScrollAtBottom();
                    });

                    $('#chatexpandbutton').attr("src", "../../Content/Images/collapse_arrows.png");

                    chatWindowOpen = true;
                }
                else {
                    $('#chatcontent').hide();
                    $('#chatsubmit').hide();

                    $('#chatwindow').animate({
                        width: '34'
                    }, 600, function () {
                    });

                    $('#chatexpandbutton').attr("src", "../../Content/Images/expand_arrows.png");
                

                    chatWindowOpen = false;
                }
            }

            function startGetEntireChatList() {
                $.ajax({
                    type: "POST",
                    url: "/Draft/ListChat/@Model.Id",
                    data: "draftId=1",
                    success: function (result) {
                        if (result != null && result.success != null && result.success) {
                            drawEntireChatList(result.chats);
                        }
                    },
                    error: function (result, textStatus, errorThrown) {
                        alert("Error: " + textStatus);
                    }
                });
            }

            function drawEntireChatList(chatList) {
                var output = "";

                $('.chatrow').remove();

                for (var i = 0; i < chatList.length; i++) {
                    addChatRow(chatList[i].ChatId,chatList[i].DateTime,chatList[i].MemberName,chatList[i].Text);
                }

                setChatScrollAtBottom();

                setTimeout(startUpdateChatList, 6000);
            }

            function setChatScrollAtBottom() {
                var objDiv = document.getElementById("chatcontent");
                objDiv.scrollTop = objDiv.scrollHeight;
            }

            function updateChatList(newChats) {

                var updatedChats = false;
                for (var i = 0; i < newChats.length; i++) {
                    addChatRow(newChats[i].ChatId, newChats[i].DateTime, newChats[i].MemberName, newChats[i].Text);
                    updatedChats = true;
                }

                if (updatedChats) {
                    setChatScrollAtBottom();
                }

                if (chatWindowOpen) {
                    setTimeout(startUpdateChatList, 3000);
                }
            }

            function startUpdateChatList() {
                var lastChatId = $('.chatrow:last').attr("id");

                lastChatId = lastChatId.substring(4);

                if (lastChatId * 1 < 0)
                    return;

                $.ajax({
                    type: "POST",
                    url: "/Draft/UpdateChat/@Model.Id",
                    data: "lastChatId=" + lastChatId,
                    success: function (result) {
                        if (result != null && result.success != null && result.success) {
                            updateChatList(result.chats);
                        }
                    },
                    error: function (result, textStatus, errorThrown) {
                        alert("Something went wrong when updating chatlist!");
                        setTimeout(startUpdateChatList, 15000);
                    }
                });


            }

            function addChatRow(id, datetime, name, text)
            {
                $('#chatcontent').append('<p id="chat' + id + '" class="chatrow"><span class="chattime">[' + datetime + ']</span><span class="chatname">' + name + ':</span><span class="chattext">' + text + '</span></p>');                    
            }

            function chatAddComplete(result) {
                var jsonResult = eval('(' + result.responseText + ')');

                if (jsonResult.success != null && jsonResult.success) {
                    $('#chat' + jsonResult.oldChatId).attr("id", "chat" + jsonResult.chatId);
                } else {
                    $('#chat' + jsonResult.oldChatId).remove();
                }
            }

            function chatAddStart(result, test, test) {
                var randomnumber = -Math.floor(Math.random() * 1000)

                var message = getParameterByName("message", this.data);
                var now = new Date();

                addChatRow(randomnumber, now.getHours() + ":" + now.getMinutes(), "Me", message);

                setChatScrollAtBottom();

                this.data += "&chatTempId=" + randomnumber;

                $('#chatinputid').attr("value", "");
            }
        </script>
        <div id="chatwindow"><input id="chatexpandbutton" type="image" src="../../Content/Images/expand_arrows.png" onclick="toggleExpandChatWindow()" />
            <div id="chatcontent">
            </div>
            <div id="chatsubmit">
                @using (Ajax.BeginForm("Chat", "Draft", new AjaxOptions() { OnBegin = "chatAddStart", OnComplete = "chatAddComplete", HttpMethod = "Post" }))
                {
                    @Html.Hidden("draftId", Model.Id);
                    @Html.TextBox("message", "", new { @class = "chatinput", @id = "chatinputid" });
                    <input type="submit" id="chatsubmit" value="Send" />
                }
            </div>
        </div>
    }
}